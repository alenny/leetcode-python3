class Solution:
    def longestLine(self, M):
        """
        :type M: List[List[int]]
        :rtype: int
        """
        if len(M) == 0 or len(M[0]) == 0:
            return 0
        rows = len(M)
        cols = len(M[0])
        longest = 0
        for row in M:
            c = 0
            while c < cols:
                while c < cols and row[c] == 0:
                    c += 1
                begin = c
                while c < cols and row[c] == 1:
                    c += 1
                longest = max(longest, c - begin)
        for c in range(cols):
            r = 0
            while r < rows:
                while r < rows and M[r][c] == 0:
                    r += 1
                begin = r
                while r < rows and M[r][c] == 1:
                    r += 1
                longest = max(longest, r - begin)
        for r0 in range(rows):
            # if longest >= min(rows - r0, cols):
            #     break
            r = r0
            c = 0
            while r < rows and c < cols:
                while r < rows and c < cols and M[r][c] == 0:
                    r += 1
                    c += 1
                begin = r
                while r < rows and c < cols and M[r][c] == 1:
                    r += 1
                    c += 1
                longest = max(longest, r - begin)
        for c0 in range(1, cols):
            # if longest >= min(cols - c0, rows):
            #     break
            c = c0
            r = 0
            while r < rows and c < cols:
                while r < rows and c < cols and M[r][c] == 0:
                    r += 1
                    c += 1
                begin = r
                while r < rows and c < cols and M[r][c] == 1:
                    r += 1
                    c += 1
                longest = max(longest, r - begin)
        for r0 in range(rows):
            # if longest >= min(rows - r0, cols):
            #     break
            r = r0
            c = cols - 1
            while r < rows and c >= 0:
                while r < rows and c >= 0 and M[r][c] == 0:
                    r += 1
                    c -= 1
                begin = r
                while r < rows and c >= 0 and M[r][c] == 1:
                    r += 1
                    c -= 1
                longest = max(longest, r - begin)
        for c0 in range(cols - 2, -1, -1):
            # if longest >= min(c0 + 1, rows):
            #     break
            c = c0
            r = 0
            while r < rows and c >= 0:
                while r < rows and c >= 0 and M[r][c] == 0:
                    r += 1
                    c -= 1
                begin = r
                while r < rows and c >= 0 and M[r][c] == 1:
                    r += 1
                    c -= 1
                longest = max(longest, r - begin)
        return longest

sol =Solution()
ret = sol.longestLine([[1,1,1,1,0,1,0,1,0,1,1,1,0,0,0,0,1,0,1,1,1,1,1,0,0,1,0,1,1,1],[1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1],[1,1,1,0,1,0,0,1,0,1,0,1,0,1,1,1,0,0,0,1,1,0,0,0,0,0,1,1,0,0],[1,0,1,1,1,1,0,0,1,0,1,0,1,0,1,1,0,0,1,0,1,0,1,0,1,1,0,0,0,1],[1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1],[0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,0,1,0,1,0,0],[0,1,0,1,1,0,1,1,1,0,1,1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1],[1,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,1,0,0,1],[0,1,0,0,1,1,0,1,1,0,0,1,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,0,1],[1,0,1,1,0,1,1,1,1,1,1,1,1,0,0,0,1,1,0,1,1,1,1,1,0,0,0,1,1,1],[1,1,1,1,0,0,1,1,1,1,0,0,1,1,0,1,0,1,1,1,0,1,1,0,0,1,0,1,1,1],[1,1,0,0,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,1,0,1,1,0,1,0,1,0],[0,0,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,1,0,1,1,0,0,1,0,0],[0,0,0,1,1,1,0,1,1,0,0,1,0,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0],[1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1],[1,1,1,1,0,0,0,1,0,1,0,1,1,1,0,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1],[0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,1,0,1,0,0,1,0,1,0],[1,0,1,1,0,1,0,1,1,1,1,1,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1],[1,1,1,0,1,0,1,1,0,0,1,0,1,1,1,1,0,1,1,0,1,0,0,1,0,0,1,1,1,1],[1,1,1,0,0,1,1,0,1,1,1,1,0,1,0,1,1,1,0,1,0,1,0,1,1,1,0,0,1,1],[1,1,1,1,1,1,0,1,1,0,1,0,1,0,1,1,0,1,1,1,0,1,0,0,1,1,0,1,1,0],[1,0,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,0,0,0,1,1,1,1,1,1,1,1],[1,0,1,0,0,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,0,0,1],[0,0,1,0,0,0,0,1,1,0,0,1,1,1,1,0,1,1,0,1,1,1,0,1,1,0,1,1,1,1],[1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1],[0,1,1,1,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,0,1,1],[1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,1,1,0,0,1,0,0,1,0,1,1,1],[1,1,0,1,1,1,1,0,0,1,1,1,1,0,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,1],[0,1,0,1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,0,1,1,1,0,1,1,1,1,1,1,0],[1,1,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0]])