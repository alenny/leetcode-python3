class Solution:
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        N = len(graph)
        visited = [False] * N
        secured = -1
        securedIdx = -1
        initialSet = set(initial)
        for idx in initial:
            if visited[idx]:
                if secured == 0 and idx < securedIdx:
                    securedIdx = idx
                continue
            sec = self.bfs(graph, initialSet, visited, idx)
            if sec > secured or sec == secured and idx < securedIdx:
                secured = sec
                securedIdx = idx
        return securedIdx

    def bfs(self, graph, initialSet, visited, idx):
        N = len(graph)
        visited[idx] = True
        q = [idx]
        infected = 0
        total = 0
        while q:
            total += len(q)
            nq = []
            for i in q:
                if i in initialSet:
                    infected += 1
                for j in range(N):
                    if visited[j] or not graph[i][j]:
                        continue
                    visited[j] = True
                    nq.append(j)
            q = nq
        return 0 if infected > 1 else total - 1
