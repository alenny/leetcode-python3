class Solution:
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        N = len(graph)
        initialSet = set(initial)
        secured = -1
        securedIdx = -1
        for removedIdx in initial:
            sec = 0
            visited = [False] * N
            for idx in range(N):
                if visited[idx] or idx == removedIdx or graph[removedIdx][idx] == 0:
                    continue
                sec += self.bfs(graph, initialSet, visited, idx, removedIdx)
            if sec > secured or sec == secured and removedIdx < securedIdx:
                secured, securedIdx = sec, removedIdx
        return securedIdx

    def bfs(self, graph, initialSet, visited, idx, removedIdx):
        N = len(graph)
        visited[idx] = True
        q = [idx]
        total = 0
        infected = 0
        while q:
            nq = []
            for i in q:
                total += 1
                if i in initialSet:
                    infected += 1
                for j in range(N):
                    if visited[j] or j == removedIdx or graph[i][j] == 0:
                        continue
                    visited[j] = True
                    nq.append(j)
            q = nq
        return 0 if infected > 0 else total


sol = Solution()
ret = sol.minMalwareSpread([[1, 1, 0], [1, 1, 1], [0, 1, 1]], [0, 1])
print(ret)
